# ============================================
# Laravel Application Configuration
# ============================================

# APP_NAME
# - 説明: アプリケーション名（ログ、メール送信元名等に使用）
# - 必須: はい
# - 環境: 開発環境=Laravel, 本番環境=本番アプリケーション名
# - セキュリティ: 公開可
# - デフォルト: Laravel
# - 注意事項: MAIL_FROM_NAMEで参照される（"${APP_NAME}"形式）
APP_NAME=Laravel

# APP_ENV
# - 説明: アプリケーション実行環境（local/staging/production）
# - 必須: はい
# - 環境: 開発環境=local, ステージング環境=staging, 本番環境=production
# - セキュリティ: 公開可
# - デフォルト: local
# - 注意事項: productionの場合はAPP_DEBUG=falseを推奨
APP_ENV=local

# APP_KEY
# - 説明: Laravel暗号化キー（AES-256-CBC、base64エンコード32文字）
# - 必須: はい
# - 環境: 開発環境=php artisan key:generate実行結果, 本番環境=php artisan key:generate実行結果
# - セキュリティ: 極秘（暗号化・署名に使用、漏洩厳禁）
# - デフォルト: 空（初回セットアップ時にphp artisan key:generate実行必須）
# - 注意事項: 本番環境では絶対に開発環境のキーを使用しないこと、変更するとセッション・暗号化データが無効化
APP_KEY=

# APP_DEBUG
# - 説明: デバッグモード（true=詳細エラー表示、false=汎用エラーページ）
# - 必須: はい
# - 環境: 開発環境=true, 本番環境=false
# - セキュリティ: 公開可（本番環境では必ずfalse）
# - デフォルト: true
# - 注意事項: 本番環境でtrueにすると機密情報漏洩リスク（スタックトレース、環境変数等）
APP_DEBUG=true

# APP_URL
# - 説明: アプリケーションのベースURL（URL生成、CORS、Sanctum等で使用）
# - 必須: はい
# - 環境: 開発環境=http://localhost, 本番環境=https://api.example.com
# - セキュリティ: 公開可
# - デフォルト: http://localhost
# - 注意事項: 本番環境ではHTTPS必須、SANCTUM_STATEFUL_DOMAINSと整合性を保つこと
APP_URL=http://localhost

# ============================================
# Laravel Sail / Xdebug Configuration
# ============================================

# SAIL_XDEBUG_MODE
# - 説明: Xdebugモード（develop/debug/coverage等のカンマ区切り）
# - 必須: いいえ（Docker Sail環境のみ）
# - 環境: 開発環境=develop,debug,coverage
# - セキュリティ: 公開可
# - デフォルト: develop,debug,coverage
# - 注意事項: カバレッジ計測にはcoverage必須、デバッグにはdebug必須
SAIL_XDEBUG_MODE=develop,debug,coverage

# ============================================
# Laravel Localization Configuration
# ============================================

# APP_LOCALE
# - 説明: アプリケーションデフォルト言語
# - 必須: はい
# - 環境: 開発環境=en, 本番環境=ja
# - セキュリティ: 公開可
# - デフォルト: en
# - 注意事項: 日本語アプリの場合はjaに変更、resources/lang/ディレクトリに言語ファイル配置
APP_LOCALE=en

# APP_FALLBACK_LOCALE
# - 説明: フォールバック言語（APP_LOCALEで翻訳が見つからない場合）
# - 必須: はい
# - 環境: 開発環境=en, 本番環境=en
# - セキュリティ: 公開可
# - デフォルト: en
# - 注意事項: 英語が一般的（Laravel標準翻訳ファイルが充実）
APP_FALLBACK_LOCALE=en

# APP_FAKER_LOCALE
# - 説明: Fakerライブラリのロケール（テストデータ生成用）
# - 必須: いいえ（開発・テスト環境のみ）
# - 環境: 開発環境=en_US, 本番環境=不要
# - セキュリティ: 公開可
# - デフォルト: en_US
# - 注意事項: 日本語テストデータが必要な場合はja_JPに変更
APP_FAKER_LOCALE=en_US

# ============================================
# Laravel Maintenance Configuration
# ============================================

# APP_MAINTENANCE_DRIVER
# - 説明: メンテナンスモードのドライバ（file/database）
# - 必須: はい
# - 環境: 開発環境=file, 本番環境=database
# - セキュリティ: 公開可
# - デフォルト: file
# - 注意事項: databaseの場合はAPP_MAINTENANCE_STOREが必須
APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

# ============================================
# PHP Server Configuration
# ============================================

# PHP_CLI_SERVER_WORKERS
# - 説明: PHPビルトインサーバーのワーカー数
# - 必須: いいえ（php artisan serve使用時のみ）
# - 環境: 開発環境=4
# - セキュリティ: 公開可
# - デフォルト: 4
# - 注意事項: 本番環境ではphp artisan serveは使用しない（Nginx/Apache推奨）
PHP_CLI_SERVER_WORKERS=4

# ============================================
# Laravel Security Configuration
# ============================================

# BCRYPT_ROUNDS
# - 説明: Bcryptハッシュアルゴリズムのラウンド数（コスト係数）
# - 必須: いいえ
# - 環境: 開発環境=12, 本番環境=12
# - セキュリティ: 公開可
# - デフォルト: 12
# - 注意事項: 値を上げるとセキュリティ向上、パフォーマンス低下（範囲: 4-31）
BCRYPT_ROUNDS=12

# ============================================
# Laravel Logging Configuration
# ============================================

# LOG_CHANNEL
# - 説明: ログチャンネル（stack/single/daily/stderr等）
# - 必須: はい
# - 環境: 開発環境=stack, 本番環境=stack
# - セキュリティ: 公開可
# - デフォルト: stack
# - 注意事項: config/logging.phpで詳細設定可能
LOG_CHANNEL=stack

# LOG_STACK
# - 説明: スタックチャンネルで使用するチャンネル
# - 必須: いいえ（LOG_CHANNEL=stackの場合）
# - 環境: 開発環境=single, 本番環境=daily
# - セキュリティ: 公開可
# - デフォルト: single
# - 注意事項: 本番環境ではdaily推奨（ログローテーション）
LOG_STACK=single

# LOG_DEPRECATIONS_CHANNEL
# - 説明: 非推奨警告のログチャンネル（null=無効）
# - 必須: いいえ
# - 環境: 開発環境=null, 本番環境=null
# - セキュリティ: 公開可
# - デフォルト: null
# - 注意事項: 開発時は有効化推奨（アップグレード対策）
LOG_DEPRECATIONS_CHANNEL=null

# LOG_LEVEL
# - 説明: ログレベル（debug/info/notice/warning/error/critical/alert/emergency）
# - 必須: はい
# - 環境: 開発環境=debug, 本番環境=error
# - セキュリティ: 公開可
# - デフォルト: debug
# - 注意事項: 本番環境ではerror以上を推奨（パフォーマンス・ログサイズ削減）
LOG_LEVEL=debug

# ============================================
# Database Configuration
# ============================================

# DB_CONNECTION
# - 説明: データベース接続ドライバ（sqlite/pgsql/mysql等）
# - 必須: はい
# - 環境: 開発環境=sqlite, 本番環境=pgsql
# - セキュリティ: 公開可
# - デフォルト: sqlite
# - 注意事項: 開発環境はSQLite推奨（軽量・高速）、本番環境はPostgreSQL推奨
DB_CONNECTION=sqlite

# --- PostgreSQL Configuration (Docker環境用) ---
# Docker Compose環境で使用する設定
# service名でホスト指定、ポート13432、SSL不要

# DB_CONNECTION
# - 説明: データベース接続ドライバ（PostgreSQL使用時はpgsql）
# - 必須: はい（PostgreSQL使用時）
# - 環境: Docker環境=pgsql
# - セキュリティ: 公開可
# - デフォルト: sqlite
# - 注意事項: PostgreSQL使用時はこの行をコメント解除し、上記のDB_CONNECTION=sqliteをコメントアウト
# DB_CONNECTION=pgsql

# DB_HOST
# - 説明: データベースホスト名（Docker環境ではservice名）
# - 必須: はい（PostgreSQL使用時）
# - 環境: Docker環境=pgsql（docker-compose.ymlのservice名）
# - セキュリティ: 公開可
# - デフォルト: pgsql
# - 注意事項: Docker Compose内部ではservice名で名前解決
# DB_HOST=pgsql

# DB_PORT
# - 説明: データベースポート番号
# - 必須: はい（PostgreSQL使用時）
# - 環境: Docker環境=13432（内部・外部とも統一）
# - セキュリティ: 公開可
# - デフォルト: 13432
# - 注意事項: Docker内部でもFORWARD_DB_PORT=13432を使用
# DB_PORT=13432

# DB_DATABASE
# - 説明: データベース名
# - 必須: はい（PostgreSQL使用時）
# - 環境: Docker環境=laravel
# - セキュリティ: 公開可
# - デフォルト: laravel
# - 注意事項: docker-compose.ymlのPOSTGRES_DBと一致させること
# DB_DATABASE=laravel

# DB_USERNAME
# - 説明: データベースユーザー名
# - 必須: はい（PostgreSQL使用時）
# - 環境: Docker環境=sail
# - セキュリティ: 機密
# - デフォルト: sail
# - 注意事項: docker-compose.ymlのPOSTGRES_USERと一致させること
# DB_USERNAME=sail

# DB_PASSWORD
# - 説明: データベースパスワード
# - 必須: はい（PostgreSQL使用時）
# - 環境: Docker環境=password
# - セキュリティ: 極秘
# - デフォルト: password
# - 注意事項: 本番環境では強力なパスワードを使用すること
# DB_PASSWORD=password

# DB_SSLMODE
# - 説明: PostgreSQL SSL接続モード（disable/prefer/require/verify-ca/verify-full）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: Docker環境=disable, 本番環境=verify-full
# - セキュリティ: 公開可
# - デフォルト: disable
# - 注意事項: ローカル開発環境はdisable、本番環境はverify-full推奨
# DB_SSLMODE=disable

# DB_SEARCH_PATH
# - 説明: PostgreSQLスキーマ検索パス
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: Docker環境=public
# - セキュリティ: 公開可
# - デフォルト: public
# - 注意事項: マルチスキーマ環境では明示的に指定推奨
# DB_SEARCH_PATH=public

# --- PostgreSQL Configuration (ネイティブ環境用) ---
# ホストマシンからDockerコンテナのPostgreSQLに接続する設定
# ローカルホスト指定、外部公開ポート13432、SSL推奨
# DB_CONNECTION=pgsql
# DB_HOST=127.0.0.1                # ネイティブ: localhost
# DB_PORT=13432                    # ネイティブ: 外部公開ポート
# DB_DATABASE=laravel
# DB_USERNAME=sail
# DB_PASSWORD=password
# DB_SSLMODE=prefer                # SSL推奨（利用可能なら使用）
# DB_SEARCH_PATH=public

# --- PostgreSQL Configuration (本番環境用) ---
# 本番環境での推奨設定（SSL必須、証明書検証）
# DB_CONNECTION=pgsql
# DB_HOST=your-production-host.example.com
# DB_PORT=5432
# DB_DATABASE=production_db
# DB_USERNAME=production_user
# DB_PASSWORD=strong_password_here
# DB_SSLMODE=verify-full           # SSL必須（証明書検証）
# DB_SSLROOTCERT=/path/to/ca-certificate.crt
# DB_SSLCERT=/path/to/client-certificate.crt
# DB_SSLKEY=/path/to/client-key.key
# DB_SEARCH_PATH=public

# --- PostgreSQL Timeout Configuration ---
# タイムアウト設定（ミリ秒単位）

# DB_STATEMENT_TIMEOUT
# - 説明: クエリ実行タイムアウト（ミリ秒）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: 開発環境=60000（60秒）, 本番環境=30000（30秒）
# - セキュリティ: 公開可
# - デフォルト: 60000
# - 注意事項: 長時間クエリ防止、値が小さすぎると正常クエリも失敗
# DB_STATEMENT_TIMEOUT=60000

# DB_IDLE_TX_TIMEOUT
# - 説明: アイドルトランザクションタイムアウト（ミリ秒）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: 開発環境=60000（60秒）, 本番環境=60000（60秒）
# - セキュリティ: 公開可
# - デフォルト: 60000
# - 注意事項: 放置トランザクション防止、デッドロック予防
# DB_IDLE_TX_TIMEOUT=60000

# DB_LOCK_TIMEOUT
# - 説明: ロック待機タイムアウト（ミリ秒、0=無制限）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: 開発環境=0, 本番環境=0
# - セキュリティ: 公開可
# - デフォルト: 0
# - 注意事項: 0推奨（デッドロック即座検知）
# DB_LOCK_TIMEOUT=0

# DB_CONNECT_TIMEOUT
# - 説明: データベース接続タイムアウト（秒）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: 開発環境=5, 本番環境=5
# - セキュリティ: 公開可
# - デフォルト: 5
# - 注意事項: ネットワーク遅延考慮、5-10秒推奨
# DB_CONNECT_TIMEOUT=5

# --- PostgreSQL PDO Configuration ---

# DB_EMULATE_PREPARES
# - 説明: プリペアドステートメントのエミュレーション（true/false）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: 開発環境=true, 本番環境=true
# - セキュリティ: 公開可
# - デフォルト: true
# - 注意事項: true推奨（接続プール対応、サーバー側ステートメント蓄積回避）
# DB_EMULATE_PREPARES=true

# --- PostgreSQL Application Configuration ---

# DB_APP_NAME
# - 説明: アプリケーション識別名（PostgreSQLログに記録）
# - 必須: いいえ（PostgreSQL使用時）
# - 環境: 開発環境=laravel-next-b2c-api
# - セキュリティ: 公開可
# - デフォルト: laravel-next-b2c-api
# - 注意事項: 監視・トラブルシューティングに有用
# DB_APP_NAME=laravel-next-b2c-api

# ============================================
# Session Configuration
# ============================================

# SESSION_DRIVER
# - 説明: セッションドライバ（array/file/cookie/database/redis等）
# - 必須: はい
# - 環境: 開発環境=array, 本番環境=redis
# - セキュリティ: 公開可
# - デフォルト: array
# - 注意事項: arrayはテスト用（永続化なし）、本番環境ではredis/database推奨
SESSION_DRIVER=array

# SESSION_LIFETIME
# - 説明: セッション有効期限（分）
# - 必須: はい
# - 環境: 開発環境=120, 本番環境=120
# - セキュリティ: 公開可
# - デフォルト: 120
# - 注意事項: セキュリティとUXのバランスを考慮（短いほど安全）
SESSION_LIFETIME=120

# SESSION_ENCRYPT
# - 説明: セッション暗号化（true/false）
# - 必須: はい
# - 環境: 開発環境=false, 本番環境=true
# - セキュリティ: 公開可
# - デフォルト: false
# - 注意事項: 本番環境ではtrue推奨（セッション情報保護）
SESSION_ENCRYPT=false

# SESSION_PATH
# - 説明: Cookieのパス
# - 必須: はい
# - 環境: 開発環境=/, 本番環境=/
# - セキュリティ: 公開可
# - デフォルト: /
# - 注意事項: サブディレクトリ配置時は調整必要
SESSION_PATH=/

# SESSION_DOMAIN
# - 説明: Cookieのドメイン（null=現在のドメイン）
# - 必須: いいえ
# - 環境: 開発環境=null, 本番環境=.example.com（サブドメイン共有時）
# - セキュリティ: 公開可
# - デフォルト: null
# - 注意事項: サブドメイン間でセッション共有する場合は.example.com形式
SESSION_DOMAIN=null

# ============================================
# Broadcasting, Filesystem, Queue Configuration
# ============================================

# BROADCAST_CONNECTION
# - 説明: ブロードキャストドライバ（log/redis/pusher等）
# - 必須: はい
# - 環境: 開発環境=log, 本番環境=redis
# - セキュリティ: 公開可
# - デフォルト: log
# - 注意事項: リアルタイム通信不要ならlog、必要ならredis/pusher
BROADCAST_CONNECTION=log

# FILESYSTEM_DISK
# - 説明: ファイルシステムディスク（local/s3等）
# - 必須: はい
# - 環境: 開発環境=local, 本番環境=s3
# - セキュリティ: 公開可
# - デフォルト: local
# - 注意事項: 本番環境はS3等のオブジェクトストレージ推奨
FILESYSTEM_DISK=local

# QUEUE_CONNECTION
# - 説明: キュードライバ（sync/database/redis等）
# - 必須: はい
# - 環境: 開発環境=database, 本番環境=redis
# - セキュリティ: 公開可
# - デフォルト: database
# - 注意事項: syncは即時実行（非同期なし）、本番環境ではredis推奨
QUEUE_CONNECTION=database

# ============================================
# Cache Configuration
# ============================================

# CACHE_STORE
# - 説明: キャッシュドライバ（file/database/redis/memcached等）
# - 必須: はい
# - 環境: 開発環境=database, 本番環境=redis
# - セキュリティ: 公開可
# - デフォルト: database
# - 注意事項: 本番環境ではredis推奨（高速・スケーラブル）
CACHE_STORE=database

# CACHE_PREFIX
# - 説明: キャッシュキーのプレフィックス（複数アプリ共有時の衝突回避）
# - 必須: いいえ
# - 環境: 開発環境=空, 本番環境=laravel_cache_
# - セキュリティ: 公開可
# - デフォルト: 空
# - 注意事項: 複数アプリで同じRedisインスタンスを共有する場合は設定推奨
# CACHE_PREFIX=

# ============================================
# Memcached Configuration
# ============================================

# MEMCACHED_HOST
# - 説明: Memcachedホスト
# - 必須: いいえ（CACHE_STORE=memcached使用時のみ）
# - 環境: 開発環境=127.0.0.1
# - セキュリティ: 公開可
# - デフォルト: 127.0.0.1
# - 注意事項: Memcached未使用の場合は不要
MEMCACHED_HOST=127.0.0.1

# ============================================
# Redis Configuration
# ============================================

# REDIS_CLIENT
# - 説明: Redisクライアントライブラリ（phpredis/predis）
# - 必須: はい（Redis使用時）
# - 環境: 開発環境=phpredis, 本番環境=phpredis
# - セキュリティ: 公開可
# - デフォルト: phpredis
# - 注意事項: phpredis推奨（PHP拡張、高速）、predisはPure PHP実装
REDIS_CLIENT=phpredis

# REDIS_HOST
# - 説明: Redisホスト
# - 必須: はい（Redis使用時）
# - 環境: 開発環境=127.0.0.1, Docker環境=redis（service名）
# - セキュリティ: 公開可
# - デフォルト: 127.0.0.1
# - 注意事項: Docker環境ではservice名を使用
REDIS_HOST=127.0.0.1

# REDIS_PASSWORD
# - 説明: Redisパスワード（null=認証なし）
# - 必須: いいえ
# - 環境: 開発環境=null, 本番環境=強力なパスワード
# - セキュリティ: 極秘（本番環境では必須）
# - デフォルト: null
# - 注意事項: 本番環境では必ず設定、開発環境はnull可
REDIS_PASSWORD=null

# REDIS_PORT
# - 説明: Redisポート番号
# - 必須: はい（Redis使用時）
# - 環境: 開発環境=6379, 本番環境=6379
# - セキュリティ: 公開可
# - デフォルト: 6379
# - 注意事項: Docker環境ではFORWARD_REDIS_PORT=13379で外部公開
REDIS_PORT=6379

# ============================================
# Mail Configuration
# ============================================

# MAIL_MAILER
# - 説明: メールドライバ（log/smtp/ses/mailgun等）
# - 必須: はい
# - 環境: 開発環境=log, 本番環境=smtp
# - セキュリティ: 公開可
# - デフォルト: log
# - 注意事項: logはメール送信せずログ出力のみ（開発用）
MAIL_MAILER=log

# MAIL_SCHEME
# - 説明: メールスキーム（null/tls/ssl）
# - 必須: いいえ
# - 環境: 開発環境=null, 本番環境=tls
# - セキュリティ: 公開可
# - デフォルト: null
# - 注意事項: 本番環境ではtls推奨
MAIL_SCHEME=null

# MAIL_HOST
# - 説明: SMTPホスト
# - 必須: いいえ（MAIL_MAILER=smtp使用時のみ）
# - 環境: 開発環境=127.0.0.1, 本番環境=smtp.example.com
# - セキュリティ: 公開可
# - デフォルト: 127.0.0.1
# - 注意事項: Mailpit（開発用）はlocalhost:1025
MAIL_HOST=127.0.0.1

# MAIL_PORT
# - 説明: SMTPポート
# - 必須: いいえ（MAIL_MAILER=smtp使用時のみ）
# - 環境: 開発環境=2525, 本番環境=587（TLS）
# - セキュリティ: 公開可
# - デフォルト: 2525
# - 注意事項: TLS=587, SSL=465, 非暗号化=25
MAIL_PORT=2525

# MAIL_USERNAME
# - 説明: SMTP認証ユーザー名
# - 必須: いいえ（MAIL_MAILER=smtp使用時のみ）
# - 環境: 開発環境=null, 本番環境=smtp_username
# - セキュリティ: 機密
# - デフォルト: null
# - 注意事項: 本番環境では必須（SMTP認証）
MAIL_USERNAME=null

# MAIL_PASSWORD
# - 説明: SMTP認証パスワード
# - 必須: いいえ（MAIL_MAILER=smtp使用時のみ）
# - 環境: 開発環境=null, 本番環境=smtp_password
# - セキュリティ: 極秘
# - デフォルト: null
# - 注意事項: 本番環境では必須（SMTP認証）
MAIL_PASSWORD=null

# MAIL_FROM_ADDRESS
# - 説明: メール送信元アドレス
# - 必須: はい
# - 環境: 開発環境=hello@example.com, 本番環境=noreply@example.com
# - セキュリティ: 公開可
# - デフォルト: hello@example.com
# - 注意事項: 本番環境では実在するドメインのアドレスを使用
MAIL_FROM_ADDRESS="hello@example.com"

# MAIL_FROM_NAME
# - 説明: メール送信元名
# - 必須: はい
# - 環境: 開発環境=${APP_NAME}, 本番環境=${APP_NAME}
# - セキュリティ: 公開可
# - デフォルト: ${APP_NAME}
# - 注意事項: APP_NAMEを参照（動的設定）
MAIL_FROM_NAME="${APP_NAME}"

# ============================================
# AWS Configuration
# ============================================

# AWS_ACCESS_KEY_ID
# - 説明: AWS アクセスキーID
# - 必須: いいえ（AWS S3使用時のみ）
# - 環境: 開発環境=空, 本番環境=AKIA...
# - セキュリティ: 極秘
# - デフォルト: 空
# - 注意事項: IAMユーザー発行、最小権限の原則適用
AWS_ACCESS_KEY_ID=

# AWS_SECRET_ACCESS_KEY
# - 説明: AWS シークレットアクセスキー
# - 必須: いいえ（AWS S3使用時のみ）
# - 環境: 開発環境=空, 本番環境=秘密鍵
# - セキュリティ: 極秘
# - デフォルト: 空
# - 注意事項: 絶対に公開リポジトリにコミットしないこと
AWS_SECRET_ACCESS_KEY=

# AWS_DEFAULT_REGION
# - 説明: AWS デフォルトリージョン
# - 必須: いいえ（AWS S3使用時のみ）
# - 環境: 開発環境=us-east-1, 本番環境=ap-northeast-1（東京）
# - セキュリティ: 公開可
# - デフォルト: us-east-1
# - 注意事項: 日本向けアプリはap-northeast-1推奨
AWS_DEFAULT_REGION=us-east-1

# AWS_BUCKET
# - 説明: AWS S3バケット名
# - 必須: いいえ（AWS S3使用時のみ）
# - 環境: 開発環境=空, 本番環境=my-app-bucket
# - セキュリティ: 公開可
# - デフォルト: 空
# - 注意事項: グローバルで一意のバケット名必須
AWS_BUCKET=

# AWS_USE_PATH_STYLE_ENDPOINT
# - 説明: S3パススタイルエンドポイント使用（true/false）
# - 必須: いいえ
# - 環境: 開発環境=false, 本番環境=false
# - セキュリティ: 公開可
# - デフォルト: false
# - 注意事項: MinIO等のS3互換ストレージではtrue必須
AWS_USE_PATH_STYLE_ENDPOINT=false


# ============================================
# Docker Port Configuration
# ============================================

# APP_PORT
# - 説明: Laravel APIのポート番号（ホストからアクセス用）
# - 必須: はい
# - 環境: 開発環境=13000, 本番環境=8000
# - セキュリティ: 公開可
# - デフォルト: 13000
# - 注意事項: Docker Composeのポートマッピングと一致させること
APP_PORT=13000

# FORWARD_REDIS_PORT
# - 説明: Redisのポート番号（ホストからアクセス用）
# - 必須: はい
# - 環境: 開発環境=13379, 本番環境=6379
# - セキュリティ: 公開可
# - デフォルト: 13379
# - 注意事項: 他のプロジェクトとのポート競合に注意
FORWARD_REDIS_PORT=13379

# FORWARD_MAILPIT_PORT
# - 説明: Mailpit SMTPポート番号（開発用メールサーバー）
# - 必須: いいえ（開発環境のみ）
# - 環境: 開発環境=11025
# - セキュリティ: 公開可
# - デフォルト: 11025
# - 注意事項: 開発環境のみ使用、本番環境では不要
FORWARD_MAILPIT_PORT=11025

# FORWARD_MAILPIT_DASHBOARD_PORT
# - 説明: Mailpit UIポート番号（メール確認画面）
# - 必須: いいえ（開発環境のみ）
# - 環境: 開発環境=13025
# - セキュリティ: 公開可
# - デフォルト: 13025
# - 注意事項: http://localhost:13025 でメール確認画面にアクセス可能
FORWARD_MAILPIT_DASHBOARD_PORT=13025

# FORWARD_DB_PORT
# - 説明: PostgreSQLのポート番号（ホストからアクセス用）
# - 必須: はい
# - 環境: 開発環境=13432, 本番環境=5432
# - セキュリティ: 公開可
# - デフォルト: 13432
# - 注意事項: 他のプロジェクトとのポート競合に注意
FORWARD_DB_PORT=13432

# FORWARD_MINIO_PORT
# - 説明: MinIO APIポート番号（オブジェクトストレージ）
# - 必須: いいえ（開発環境のみ）
# - 環境: 開発環境=13900
# - セキュリティ: 公開可
# - デフォルト: 13900
# - 注意事項: S3互換APIエンドポイント
FORWARD_MINIO_PORT=13900

# FORWARD_MINIO_CONSOLE_PORT
# - 説明: MinIO Consoleポート番号（管理画面）
# - 必須: いいえ（開発環境のみ）
# - 環境: 開発環境=13010
# - セキュリティ: 公開可
# - デフォルト: 13010
# - 注意事項: http://localhost:13010 でMinIO管理画面にアクセス可能
FORWARD_MINIO_CONSOLE_PORT=13010

# ============================================
# CORS Configuration
# ============================================

# CORS_ALLOWED_ORIGINS
# - 説明: CORS許可オリジンのカンマ区切りリスト
# - 必須: はい
# - 環境: 開発環境=http://localhost:13001,http://localhost:13002,..., 本番環境=https://user.example.com,https://admin.example.com
# - セキュリティ: 公開可
# - デフォルト: http://localhost:13001,http://localhost:13002,http://127.0.0.1:13001,http://127.0.0.1:13002,http://host.docker.internal:13001,http://host.docker.internal:13002
# - 注意事項: 本番環境ではHTTPSのみ許可、HTTPオリジンは自動検出され警告ログ出力
CORS_ALLOWED_ORIGINS=http://localhost:13001,http://localhost:13002,http://127.0.0.1:13001,http://127.0.0.1:13002,http://host.docker.internal:13001,http://host.docker.internal:13002

# CORS_ALLOWED_METHODS
# - 説明: CORS許可HTTPメソッドのカンマ区切りリスト
# - 必須: はい
# - 環境: 開発環境=GET,POST,PUT,DELETE,PATCH,OPTIONS, 本番環境=GET,POST,PUT,DELETE,PATCH,OPTIONS
# - セキュリティ: 公開可
# - デフォルト: GET,POST,PUT,DELETE,PATCH,OPTIONS
# - 注意事項: OPTIONSはプリフライトリクエストに必須
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,PATCH,OPTIONS

# CORS_ALLOWED_HEADERS
# - 説明: CORS許可ヘッダーのカンマ区切りリスト
# - 必須: はい
# - 環境: 開発環境=Content-Type,Authorization,X-Requested-With, 本番環境=Content-Type,Authorization,X-Requested-With
# - セキュリティ: 公開可
# - デフォルト: Content-Type,Authorization,X-Requested-With
# - 注意事項: Authorizationはトークン認証に必須、Content-TypeはJSON送信に必須
CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With

# CORS_MAX_AGE
# - 説明: プリフライトリクエストのキャッシュ期間（秒）
# - 必須: はい
# - 環境: 開発環境=600（10分）, 本番環境=86400（24時間）
# - セキュリティ: 公開可
# - デフォルト: 600
# - 注意事項: 値が大きいほどプリフライトリクエスト削減、小さいほど設定変更の反映が早い
CORS_MAX_AGE=600

# CORS_SUPPORTS_CREDENTIALS
# - 説明: 認証情報（Cookie等）の送信許可（true/false）
# - 必須: はい
# - 環境: 開発環境=true, 本番環境=true
# - セキュリティ: 公開可
# - デフォルト: true
# - 注意事項: trueの場合はCORS_ALLOWED_ORIGINSで*使用不可（具体的なオリジン列挙必須）、セキュリティヘッダーテストで必要
CORS_SUPPORTS_CREDENTIALS=true

# --- Staging Environment ---
# ステージング環境用のCORS設定（HTTPSオリジンのみ）
# 本番環境デプロイ前の検証環境
# CORS_ALLOWED_ORIGINS=https://stg-user.example.com,https://stg-admin.example.com
# CORS_MAX_AGE=3600

# --- Production Environment ---
# 本番環境用のCORS設定（HTTPSオリジンのみ、セキュリティ重視）
# 警告: HTTPオリジンは本番環境で自動検出され、警告ログが出力されます
# CORS_ALLOWED_ORIGINS=https://user.example.com,https://admin.example.com
# CORS_MAX_AGE=86400

# ============================================
# Security Headers Configuration
# ============================================

# SECURITY_X_FRAME_OPTIONS
# - 説明: X-Frame-Optionsヘッダーの値（iframe埋め込み制御）
# - 必須: はい
# - 環境: 開発環境=SAMEORIGIN, 本番環境=DENY
# - セキュリティ: 公開可
# - デフォルト: DENY
# - 注意事項: 'DENY'=すべての埋め込みを拒否、'SAMEORIGIN'=同一オリジンのみ許可
SECURITY_X_FRAME_OPTIONS=DENY

# SECURITY_REFERRER_POLICY
# - 説明: Referrer-Policyヘッダーの値（リファラー情報制御）
# - 必須: はい
# - 環境: 開発環境=strict-origin-when-cross-origin, 本番環境=strict-origin-when-cross-origin
# - セキュリティ: 公開可
# - デフォルト: strict-origin-when-cross-origin
# - 注意事項: 個人情報漏洩リスクを低減、HTTPSダウングレード時はリファラー送信なし
SECURITY_REFERRER_POLICY=strict-origin-when-cross-origin

# SECURITY_ENABLE_CSP
# - 説明: Content Security Policy（CSP）の有効/無効
# - 必須: はい
# - 環境: 開発環境=true, 本番環境=true
# - セキュリティ: 公開可
# - デフォルト: true
# - 注意事項: falseにするとXSS攻撃リスクが増大
SECURITY_ENABLE_CSP=true

# SECURITY_CSP_MODE
# - 説明: CSPモード（report-only=レポートのみ、enforce=強制ブロック）
# - 必須: はい
# - 環境: 開発環境=report-only, 本番環境=enforce（段階的導入後）
# - セキュリティ: 公開可
# - デフォルト: report-only
# - 注意事項: 初期導入はreport-onlyで1-2週間監視、違反率0.1%以下でenforceに移行
SECURITY_CSP_MODE=report-only

# SECURITY_CSP_SCRIPT_SRC
# - 説明: CSP script-srcディレクティブ（スクリプト読み込み元制御）
# - 必須: はい
# - 環境: 開発環境=self, 本番環境=self
# - セキュリティ: 公開可
# - デフォルト: self
# - 形式: カンマ区切り（例: self,unsafe-eval）、シングルクォートは自動追加されます
# - 注意事項: 'unsafe-eval'/'unsafe-inline'は非推奨（XSSリスク）
SECURITY_CSP_SCRIPT_SRC=self

# SECURITY_CSP_STYLE_SRC
# - 説明: CSP style-srcディレクティブ（スタイルシート読み込み元制御）
# - 必須: はい
# - 環境: 開発環境=self,unsafe-inline, 本番環境=self,unsafe-inline
# - セキュリティ: 公開可
# - デフォルト: self,unsafe-inline
# - 形式: カンマ区切り（例: self,unsafe-inline）、シングルクォートは自動追加されます
# - 注意事項: 'unsafe-inline'は一時的、将来的にはnonce/hashベース認証推奨
SECURITY_CSP_STYLE_SRC=self,unsafe-inline

# SECURITY_CSP_IMG_SRC
# - 説明: CSP img-srcディレクティブ（画像読み込み元制御）
# - 必須: はい
# - 環境: 開発環境=self,data:,https:, 本番環境=self,data:,https:
# - セキュリティ: 公開可
# - デフォルト: self,data:,https:
# - 形式: カンマ区切り（例: self,data:,https:）、キーワードにはシングルクォートが自動追加されます
# - 注意事項: data:=Base64画像、https:=HTTPS画像全般を許可
SECURITY_CSP_IMG_SRC=self,data:,https:

# SECURITY_CSP_CONNECT_SRC
# - 説明: CSP connect-srcディレクティブ（fetch/XHR接続先制御）
# - 必須: はい
# - 環境: 開発環境=self, 本番環境=self
# - セキュリティ: 公開可
# - デフォルト: self
# - 形式: カンマ区切り（例: self,https://api.example.com）、シングルクォートは自動追加されます
# - 注意事項: API通信先、WebSocket接続先を明示的に指定
SECURITY_CSP_CONNECT_SRC=self

# SECURITY_CSP_FONT_SRC
# - 説明: CSP font-srcディレクティブ（フォント読み込み元制御）
# - 必須: はい
# - 環境: 開発環境=self,data:, 本番環境=self,data:
# - セキュリティ: 公開可
# - デフォルト: self,data:
# - 形式: カンマ区切り（例: self,data:）、キーワードにはシングルクォートが自動追加されます
# - 注意事項: data:=Base64エンコードフォント
SECURITY_CSP_FONT_SRC=self,data:

# SECURITY_CSP_REPORT_URI
# - 説明: CSP違反レポート送信先URI
# - 必須: はい（CSP有効時）
# - 環境: 開発環境=/api/csp/report, 本番環境=/api/csp/report
# - セキュリティ: 公開可
# - デフォルト: /api/csp/report
# - 注意事項: Laravel APIで違反レポートを収集し、security.logに記録
SECURITY_CSP_REPORT_URI=/api/csp/report

# SECURITY_FORCE_HSTS
# - 説明: Strict-Transport-Security（HSTS）ヘッダーの有効/無効
# - 必須: はい
# - 環境: 開発環境=false, 本番環境=true
# - セキュリティ: 公開可
# - デフォルト: false
# - 注意事項: HTTPSのみで有効、HSTS有効化後はHTTPアクセス不可（max-age期間中）
SECURITY_FORCE_HSTS=false

# SECURITY_HSTS_MAX_AGE
# - 説明: HSTSヘッダーのmax-age値（秒）
# - 必須: いいえ（SECURITY_FORCE_HSTS=true時のみ）
# - 環境: 開発環境=31536000（1年）, 本番環境=31536000（1年）
# - セキュリティ: 公開可
# - デフォルト: 31536000
# - 注意事項: 1年間（31536000秒）を推奨、短すぎるとセキュリティ効果が低減
SECURITY_HSTS_MAX_AGE=31536000

# SECURITY_HSTS_INCLUDE_SUBDOMAINS
# - 説明: HSTSヘッダーのincludeSubDomainsディレクティブ有効/無効
# - 必須: いいえ（SECURITY_FORCE_HSTS=true時のみ）
# - 環境: 開発環境=true, 本番環境=true
# - セキュリティ: 公開可
# - デフォルト: true
# - 注意事項: サブドメインもHTTPSを強制、サブドメインでHTTPアクセスが必要な場合はfalse
SECURITY_HSTS_INCLUDE_SUBDOMAINS=true

# SECURITY_HSTS_PRELOAD
# - 説明: HSTSヘッダーのpreloadディレクティブ有効/無効
# - 必須: いいえ（SECURITY_FORCE_HSTS=true時のみ）
# - 環境: 開発環境=false, 本番環境=true（慎重に判断）
# - セキュリティ: 公開可
# - デフォルト: false
# - 注意事項: ⚠️ HSTS Preloadは事実上不可逆です ⚠️
#   1. 登録: https://hstspreload.org で申請（承認に数ヶ月）
#   2. 削除: 申請後も数ヶ月〜数年間ブラウザに残存
#   3. 影響: すべてのサブドメインでHTTPS必須（HTTPアクセス完全不可）
#   4. 推奨: max-age=31536000, includeSubDomains=true で6ヶ月運用後に有効化
SECURITY_HSTS_PRELOAD=false
