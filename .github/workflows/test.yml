name: Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/laravel-api/**'
      - '.github/workflows/test.yml'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop
    paths:
      - 'backend/laravel-api/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testing
        ports:
          - 13432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 13379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_pgsql, redis
          coverage: xdebug
          tools: composer:v2

      - name: Copy .env
        run: cp .env.example .env
        working-directory: backend/laravel-api

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: backend/laravel-api

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/laravel-api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        working-directory: backend/laravel-api
        env:
          ENV_VALIDATION_SKIP: true

      - name: Generate application key
        run: php artisan key:generate
        working-directory: backend/laravel-api
        env:
          ENV_VALIDATION_SKIP: true

      - name: Validate environment variables
        run: php artisan env:validate
        working-directory: backend/laravel-api

      - name: Create shard test database
        run: PGPASSWORD=password psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p 13432 -U sail -d postgres -c "CREATE DATABASE testing_${{ matrix.shard }} OWNER sail;"
        working-directory: backend/laravel-api

      - name: Run database migrations
        run: php artisan migrate --force
        working-directory: backend/laravel-api
        env:
          DB_CONNECTION: pgsql_testing
          DB_TEST_HOST: 127.0.0.1
          DB_TEST_PORT: 13432
          DB_TEST_DATABASE: testing_${{ matrix.shard }}
          DB_TEST_USERNAME: sail
          DB_TEST_PASSWORD: password

      - name: Set up test environment
        run: |
          php artisan config:clear
          php artisan cache:clear
        working-directory: backend/laravel-api
        env:
          DB_CONNECTION: pgsql_testing
          DB_TEST_HOST: 127.0.0.1
          DB_TEST_PORT: 13432
          DB_TEST_DATABASE: testing_${{ matrix.shard }}
          DB_TEST_USERNAME: sail
          DB_TEST_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 13379
          CACHE_STORE: array

      - name: Run Pest Tests (Shard ${{ matrix.shard }})
        run: ./vendor/bin/pest --shard=${{ matrix.shard }}/4
        working-directory: backend/laravel-api
        env:
          DB_CONNECTION: pgsql_testing
          DB_TEST_HOST: 127.0.0.1
          DB_TEST_PORT: 13432
          DB_TEST_DATABASE: testing_${{ matrix.shard }}
          DB_TEST_USERNAME: sail
          DB_TEST_PASSWORD: password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 13379

      - name: Archive test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-shard-${{ matrix.shard }}
          path: backend/laravel-api/storage/logs/
          retention-days: 7

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite3
          coverage: xdebug
          tools: composer:v2

      - name: Copy .env
        run: cp .env.example .env
        working-directory: backend/laravel-api

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: backend/laravel-api

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/laravel-api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        working-directory: backend/laravel-api
        env:
          ENV_VALIDATION_SKIP: true

      - name: Generate application key
        run: php artisan key:generate
        working-directory: backend/laravel-api
        env:
          ENV_VALIDATION_SKIP: true

      - name: Validate environment variables
        run: php artisan env:validate
        working-directory: backend/laravel-api

      - name: Run Tests with Coverage
        run: XDEBUG_MODE=coverage ./vendor/bin/pest --coverage --min=85
        working-directory: backend/laravel-api
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'

      - name: Generate Coverage Report
        run: XDEBUG_MODE=coverage ./vendor/bin/pest --coverage --coverage-html=coverage-report
        working-directory: backend/laravel-api
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/laravel-api/coverage-report/
          retention-days: 30